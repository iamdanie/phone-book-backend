{"version":3,"sources":["server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA6B;AAC7B,sDAA6B;AAC7B,oDAA2B;AAC3B,gDAAuB;AACvB,6CAA8C;AAC9C,wDAAyC;AAEzC,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAA;AAE9C,MAAM,MAAM;IAWV;QARA,WAAM,GAAG,iBAAO,CAAC,YAAY,CAAC;YAC5B,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,IAAI,EAAE;YAC5C,UAAU,EAAE;gBACV,IAAI,iBAAO,CAAC,UAAU,CAAC,OAAO,EAAE;gBAChC,IAAI,iBAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC;aACzD;SACF,CAAC,CAAA;QAGA,IAAI,CAAC,GAAG,GAAG,iBAAO,EAAE,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CACV,cAAI,CAAC;YACH,oBAAoB,EAAE,GAAG;SAC1B,CAAC,CACH,CAAA;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,CACV,wBAAU,CAAC;YACT,QAAQ,EAAE,IAAI;SACf,CAAC,CACH,CAAA;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAI,EAAE,CAAC,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAA;QAC3B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,IAAI,EAAE,CAAC,CAAA;QACrE,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,CAAA;IACjB,CAAC;CACF;AAED,kBAAe,IAAI,MAAM,EAAE,CAAC,GAAG,CAAA","file":"server.js","sourcesContent":["import express from 'express'\nimport winston from 'winston'\nimport morgan from 'morgan'\nimport cors from 'cors'\nimport { json, urlencoded } from 'body-parser'\nimport * as routes from './routes/_index'\n\nconst { PORT } = require('../config/api.json')\n\nclass Server {\n  public app: express.Application\n\n  logger = winston.createLogger({\n    level: 'info', format: winston.format.json(),\n    transports: [\n      new winston.transports.Console(),\n      new winston.transports.File({ filename: 'logfile.log' })\n    ]\n  })\n\n  constructor() {\n    this.app = express()\n    this.app.use(\n      cors({\n        optionsSuccessStatus: 200,\n      })\n    )\n    this.app.use(\n      urlencoded({\n        extended: true,\n      })\n    )\n    this.app.use(json())\n    this.app.use(morgan('dev'))\n    this.app.listen(PORT, () => {\n      this.logger.info(`--> Server successfully started at port ${PORT}`)\n    })\n    routes.initRoutes(this.app)\n  }\n\n  getApp() {\n    return this.app\n  }\n}\n\nexport default new Server().app\n"],"sourceRoot":"../src"}